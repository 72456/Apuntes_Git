Clase 1
***************************
Comandos de consola
***************************
// Ir  la carpeta del home
	cd /
// Ver archivo
	ls -l
//ver archivos cultos 
	ls -al
// limpiar la consola
	clear
	ctrl + l
// Ir a otro disco duro 
	cd /mnt/'nobre del disco'
//Ir a disco c
	cd /c
//Mostrar en que carpeta me encuentro
	pwd
//Crear una carpeta
	mkdir _nombre de la carpeta_
//Copiar una carpeta
	cp _nombre arcivo a copiar_ _nombre nuevo del archivo_
//Visualizar rutas en arbol
	tree
//Mover un archivo hacia atras
	mv _nombre del archivo_ ..
	mv _nombre del archivo_ _nombre de la carpeta a donde se movera_
//Renombrar un archivo
	mv _nombre actual_ _nombre nuevo del archivo_
//Borrar un archivo (remover)
	rm _nombre de lo que se borrara_
	"buena practica"
	rm -i _nombre del archivo_ ***Esto preguntara si quieres borrarlo***
// ver ayuda del comando, se usa para todos los comands
	rm --help
	comando --help
//Borrar una carpeta o directorio (remover)
	rm -ri _nombre de la carpeta o directorio_
//mostrar e contenido de un archivo
	cat 'nobre del archivo.extension'
//Mostrar la historia de comandos que he usado
	history
	!numero de comando

Clase 2
************************
Apuntes de Git
************************
//Crear un repositorio
	git init
// comando de estatus del proyecto git
	git status
//añadir un archivo al repositorio
	git add 'nombre de archivo con extension'
//saca el archivo
	git rm --cached 'nombre del archivo'
//enviar cambios al repositorio
	git commit -m "mensaje para referencia"
	mensaje = "este es el primer comit"
//Configurar quienes somos para git
	git config
	git --list
	git --list --show-origin
	git config --global user.name "Nombre"
	git config --global user.email "Nombre"
//abrir un archivo en visual studio desde la consola
	code 'nombre de archivo con extnsion"
//ver los cambios hechos
	git log "nombre del archivo"

Clase 3
*******************************
Git historial
*******************************
//Mostrar el historial de cambios
	git log "nombre del archivo"
//Mostrar los cambios que ha habido en un arhcivo
	git show "nombre del archivo"
//Actualizar todo todo
	git add .
//Comparar versiones modifcadas
	git diff "número de commit comparar 1" "numero de commit a comparar 2"
	Ejemplo número de comit:fbbe4b2a024b675e49ca57f527101566dd22a614 
	preferentemente escribir primero el número de la version más vieja y luego el de la mas nueva
NOTA IMPORTANTE: Para salir de la inteface de cambios del git usa la letra "q"
//Como volver a una versión vieja

Clase 4
********************************
Sacar archivos del repositorio
********************************
// Ramas, se usa para crear ramas como por ejemplo, una rama experimental del proyecto o un "bugfixing" "hotfix"
	se usa para separar el proyecto en ramas y posteriormente se unen en una version final mediante un "merge"

	se suelen usar tres ramas en un proyecto
	Rama 1 = Master
	Rama 2 = development (experiementos)
	Rama 3 = hotfix      (bugfixing)
//Para volver a una version anterior se usa
	git reset "numero del repositorio" --hard  (Este es el más peligroso, por que vuelve al estado completo anterior, borra todo lo que se hizo anteriormente)
	git reset "número del repositorio" --soft  (Lo que se tiene en staging sigue ahí, es decir no se borra lo anterior)
	 
//ver cambios espcificos del git 
	git log --stat
	con la letra q se puede salir del menu
//regresar al primer commit
	Copiar el indicador del primer commit y luego se hace un checkput
	git checkout "número del commit" "nombre del archivo con extensión"
	Ejemplo: checkout 35b561fa6817151e6ec1d8e4f2848d232357e955 historia.txt
	para regresar a la ultima version se usa
	git checkout master "nombre del archivo"
	Ejemplo:git checkout master historia.txt 
// git rm
	Este comando nos ayuda a eliminar el archivo de git, sin eliminar su historial del sistema de versiones.
	Esto quiere decir que si necesitamos recuperar el archivo solo debemos "viajar en el tiempo" y recuperar el útimo commit antes de norrar el archivo en cuestion
	git rm -m "mensaje" "nombre del archivo con extensión"
//git rm --cached (git rm --cached "nombre del archivo")
	Elimina los archivos de nuestro repositorio local y del área de staging, pero los maniene en nuestro disco duro. Básicamente le dice a git
	que deje de trackear el historial de cambios de estos archivos, por lo que pasara a un estado untracked
//git rm --force
	Elimina los archivos de git y del disco duro. Git siempre guarda todo, por lo que podemos acceder al registro de la existencia
	de los archivos, de modo que podemos recuperarlos si es necesario (pero se usan comandos más avanzados)
//git reset HEAD
	Este es el comando para sacar archivos del área de staging. No para borrarlos ni nada de eso, solo para que los últimos cambios
	de estos archivos no se envíen al último commit, a menos que cambiemos de opinión y lo incluyamos de nuevo.
	
Clase 5
*************************************
Comandos para trabajo remoto con GIT
*************************************
//git clobe url_del_servidor_remoto
	Nos permite descargar los archivos de la ultima versión de la rama
	principal y todo el historil de cambios en la carpeta .git
//git push
	luego de hacer git add y git commit, debemos ejecutar este comando para 
	mandar los cambios al servidor remoto
//git fetch
	lo usamos para traer actualizaciones del servidor remoto y guardarlas en nuestro
	repositorio local (en caso de que hayan, por supuesto)
//git merge
	También usamos el comando git merge con servidores remotos. lo necesitamos
	para combinar los últimos cambios del servidor remoto y nuestro directorio de trabajo
//git pull
	Básicamente, git fetch y git merge al mismo tiempo

Clase 6
***********************************
Creación de ramas
***********************************
//git commit -am
	Se hace el commit y el add al mismo timpo con archivos que ya se les había hecho commit
	git commit -am "Este es un cambio más hecho"
//git log --stat	
	Muestra las estadistícas de los cambios hechos en commit
// git show		
	Muestra los últimos cambios hechos 
// git branch Nombre de la ramagit branch Nombre de la rama
	La rama se crea desde el lugar donde estoy
	asegrarse que el head este en el master, esto se verifica con git show
	git branch cabecera
//git checkout nombre de la rama	
	Este comando se usa para moverse de rama
	git checkout cabecera
	con git show, se puede verificar que el head esta en rama deseada, en esta caso cabecera
	
************************************************************************
************************************************************************
Práctica de errores
************************************************************************
************************************************************************

2) Este es el cambio hecho en la rama master para fusionar después
	asegrarse que el head este en el master, esto se verifica con git show
	git branch cabecera
//git checkout nombre de la rama	
	Este comando se usa para moverse de rama
	git checkout cabecera
	con git show, se puede verificar que el head esta en rama deseada, en esta caso cabecera
********Aquí se hizo el cambio a cabecera
1) Este es el cambio en cabecera para fusionar después//git branch	
	Indica que ramas hay y en que ramas estamos
//git merge "nombre de la rama de donde se traeran los cambio" 
	Fusionar archivos de ambas ramas 
	Merge, el merge siempre va a ocurrir en la rama donde estamos si hago el merge (fusion) desde la cabecera
	las versiones de branch se iran a cabecera, se recomienda traer a master lo que se hace en cabecera
	1) poner el head en master
	2) invocar el comando merge en master
	3) nunca debe estar la misma línea escrita
	4) Ejemplo: git merge cabecera -m "Esta es la fusión"
*** Simulación error en MASTER línea 186

**********************
clase 7 Github
**********************
//Crear una cuenta de  Github	
	Para crear y empezar a trabajar, basta con iniciar en la página de Github
	a considerar lo siguiente
	1) Es una buena práctica crear un archvio de readme
	2) Esta es  un ejemplo de una url creada para un repositorio https://github.com/72456/Apuntes_Git
	3) Copiar la url y en el repositorio
//git remote add origin "dirección url"
	Agregar un origen remoto de los archivos, para entrar a github
	Ejemplo: git remote add origin https://github.com/72456/Apuntes_Git.git
//git remote -v
	muestra el orgin para hacer fetch y push (traer cosas y enviar cosas)
//git push origin master  	
	Envía la rama master al origen 
	después de esto solo darle accesos con el número de usuario y contraseña
	En git hub tengo un archivo readme que debo de trarme para esto se hace lo siguiente
//git remote pull origin master
	Trae los archivos desde github 
//git pull oigin main --allow-unrelated-histories 
	permite relacionar las historias de github
	con esto se trajo a readme
//git push origin master 	
	Para añadir archivos a github con git push origin master 
	se necesita acceso con el nombre de usuario y una contraseña
	por disposición la constraseña ya no se usa y en su lugar se usa un token
	este toquen se genera así
	https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token
	




//Haciendo una edición desde github una más
